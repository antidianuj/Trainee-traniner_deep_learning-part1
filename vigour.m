function [y1] = vigour(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Dec-2019 17:11:57.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx1 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 30;
x1_step1.gain = 0.04;
x1_step1.ymin = -1;

% Layer 1
b1 = [14.0146779469154108;-10.886071413863465551;-7.8341858101156178762;-4.664144017454862734;-1.5554412981200138599;-1.5402972980475013731;-4.6771204462951887493;7.8287266854757433521;-10.886708844387298356;13.843304133503249176];
IW1_1 = [-13.985322121323283895;14.002124355222115071;13.966152931372761259;14.000363901875687134;14.000019706268908237;-14.003047739271698546;-13.997983848744983248;13.969421003710818852;-14.001515364736013325;14.156693222975007984];

% Layer 2
b2 = -0.12446167453084855392;
LW2_1 = [0.38240795053703446893 0.37832419835337977032 0.033921427012133714696 -0.20975824858518285487 0.3800711396606915593 -0.66592734529457797699 0.54906088256799201464 0.63879584414186285635 0.037855662190506546294 -0.18564171621688538294];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.137835975189524;
y1_step1.xoffset = 4;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
