function [y1] = confusion(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Dec-2019 17:07:20.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx1 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 30;
x1_step1.gain = 0.04;
x1_step1.ymin = -1;

% Layer 1
b1 = [-13.649858204190465472;10.883278837552081697;-7.5221525612117643433;4.6681002454208710972;-1.5818199801634755808;1.5459890297156169137;-4.6587987376687207686;-7.8113280928342554432;-10.887962472092313604;-14.280477400801377286];
IW1_1 = [14.350147579131142805;-14.001847349446423507;14.153378048902457209;-13.999786643248617324;13.994716283041485738;14.001920641592558781;-14.001682081954406556;-13.979872972924166419;-13.999481299573115933;-13.719520165806651235];

% Layer 2
b2 = -0.72739225308578558948;
LW2_1 = [-0.72849703359376261069 0.42525109685321765829 0.49037119575572257757 -0.23670191005794427586 0.65481476703400998129 -0.33324840582529186017 0.37458049365777529305 -0.47702266781164809339 0.0056185137760516616276 0.44233217240123101632];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.558659217877095;
y1_step1.xoffset = 3.8;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
