function [y1] = depression(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Dec-2019 17:08:34.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx1 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 30;
x1_step1.gain = 0.04;
x1_step1.ymin = -1;

% Layer 1
b1 = [-13.682233147752944191;-10.889012348574381051;-7.8873275989459905588;-4.667457848963558753;1.5735215819341128451;-1.491616068426879993;-4.6498340071706945054;7.9435551640363293302;10.890719121251976276;-14.025111167964348979];
IW1_1 = [14.317769284576018052;14.000446645925395117;13.934260412043038002;13.999860459720252948;-13.996437002312083209;-14.012754563328817525;-14.003224578193130156;13.900514826013607106;13.999315021381955049;-13.974888601527208465];

% Layer 2
b2 = -0.22156232528313021812;
LW2_1 = [-0.2384585766430121212 -0.3916266870689882329 -0.72087978293266541385 0.28681479629062250902 -0.22320740312105535885 -0.45983369222465131365 0.24861332981372905038 0.12136073864799486188 0.16794443240433407083 0.5440589956082698686];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.361663652802893;
y1_step1.xoffset = 4.38;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
