function [y1] = anger(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Dec-2019 17:05:27.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx1 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 30;
x1_step1.gain = 0.04;
x1_step1.ymin = -1;

% Layer 1
b1 = [-13.78300522567308839;-10.89469870536903251;-7.8798803185507688696;-4.6630898001900256133;1.5479039273457626535;-1.5489063157198568188;4.6492214804579479193;7.7966430717086829816;-10.876678290268630533;-14.301875684034261127];
IW1_1 = [14.216998420068479803;13.997796483294440151;13.938723874030081618;14.000732324670655871;-14.001526341346757221;-14.001318947972105633;14.002930781068066324;13.988680245978502015;-14.004397719534901867;-13.698119400619402697];

% Layer 2
b2 = -0.26141483006329219174;
LW2_1 = [0.059758272019448999135 -0.71041382210325232371 0.29043651330570335878 0.81639503705084048857 0.030898438660246642373 0.011185015525107269707 0.15880147266877370216 -0.20197440832216428941 -0.13431842088856296713 0.37457500224245254827];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.316957210776545;
y1_step1.xoffset = 3.6;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
