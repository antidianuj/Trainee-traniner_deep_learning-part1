function [y1] = fatigue(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Dec-2019 17:09:45.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx1 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 30;
x1_step1.gain = 0.04;
x1_step1.ymin = -1;

% Layer 1
b1 = [-13.871901177137612393;10.887518998166216377;7.7929082640043221275;-4.6642195129691623734;-1.5555508310129351202;1.5264476691369395223;4.6353256688781581119;-7.7674127667427788069;-10.886562753667631043;13.987415765720855987];
IW1_1 = [14.128098880545511662;-14.001635915001317656;-13.99092484711210993;14.000519118238081262;14.00000209693014952;14.00582419432937975;14.006340692251397329;-14.006215689414329262;-14.001465348261012522;14.012582759813710709];

% Layer 2
b2 = -0.59443395602207449446;
LW2_1 = [0.06138471301028486371 0.60210677149867675162 0.4882982678380887176 0.81501449994528463172 0.18877851096450512514 0.39657299708451004827 0.34486355301065874102 0.49911872125744582984 -0.14253850835997955437 -0.062923025598307716355];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.480769230769231;
y1_step1.xoffset = 4;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
